INFO - root :
Train PPO maskable started ! 

INFO - root :

        Environment information :
        
        Grid size = 12
        Q = 25
        K = 50
        n_vehicles = 4
         

INFO - root :
Number of CPUs = 8 

INFO - root :
the model parameters :
 {'policy': OrderedDict([('mlp_extractor.policy_net.0.weight', tensor([[-0.0269,  0.0171,  0.0159,  ...,  0.0057, -0.0333,  0.0346],
        [-0.0213, -0.0024, -0.0138,  ...,  0.0148, -0.0464,  0.0178],
        [ 0.0150, -0.0238,  0.0603,  ..., -0.0152, -0.0321,  0.0063],
        ...,
        [ 0.0679,  0.0183, -0.0468,  ..., -0.0143,  0.0460, -0.0269],
        [-0.0287, -0.0530,  0.0008,  ..., -0.0594, -0.0183, -0.0016],
        [-0.0637, -0.0105,  0.0546,  ..., -0.0353,  0.0320,  0.0139]])), ('mlp_extractor.policy_net.0.bias', tensor([0., 0., 0.,  ..., 0., 0., 0.])), ('mlp_extractor.policy_net.2.weight', tensor([[ 0.0113, -0.0407, -0.0175,  ...,  0.0067, -0.0239,  0.0047],
        [-0.0201, -0.0105, -0.0162,  ..., -0.0261,  0.0452, -0.0396],
        [ 0.0369, -0.0331, -0.0363,  ...,  0.0061, -0.0101, -0.0997],
        ...,
        [ 0.0231,  0.0169,  0.0053,  ..., -0.0035,  0.0436, -0.0089],
        [-0.0301, -0.0523,  0.0691,  ...,  0.0475,  0.0343,  0.0307],
        [-0.0469, -0.0008,  0.0147,  ...,  0.0019, -0.0029, -0.0024]])), ('mlp_extractor.policy_net.2.bias', tensor([0., 0., 0.,  ..., 0., 0., 0.])), ('mlp_extractor.policy_net.4.weight', tensor([[-0.0400,  0.0226, -0.0023,  ...,  0.0609,  0.0297,  0.0299],
        [ 0.0069,  0.0063,  0.0108,  ..., -0.0014,  0.0512, -0.0711],
        [ 0.0122,  0.0311, -0.0067,  ...,  0.0092,  0.0104,  0.0204],
        ...,
        [ 0.0604, -0.0169,  0.0230,  ..., -0.0050,  0.0436,  0.0252],
        [ 0.0048, -0.0291,  0.0564,  ...,  0.0254,  0.0106,  0.0082],
        [ 0.0530,  0.0376, -0.0452,  ...,  0.0087, -0.0276, -0.0305]])), ('mlp_extractor.policy_net.4.bias', tensor([0., 0., 0.,  ..., 0., 0., 0.])), ('mlp_extractor.policy_net.6.weight', tensor([[-0.0182,  0.0106,  0.0176,  ..., -0.0692,  0.0346, -0.0038],
        [ 0.0718,  0.0307, -0.0698,  ...,  0.0634, -0.0366,  0.0271],
        [-0.0208,  0.0500, -0.0526,  ..., -0.0668,  0.0353, -0.0580],
        ...,
        [ 0.0592, -0.0291,  0.0736,  ..., -0.0240, -0.0169, -0.0119],
        [ 0.0501,  0.0401, -0.0995,  ...,  0.0745, -0.0211, -0.0302],
        [ 0.0136, -0.0313, -0.0376,  ..., -0.0038,  0.0309,  0.0356]])), ('mlp_extractor.policy_net.6.bias', tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])), ('mlp_extractor.policy_net.8.weight', tensor([[ 0.0053,  0.0715,  0.0571,  ..., -0.0083, -0.1091,  0.1246],
        [-0.1640, -0.0410, -0.0243,  ..., -0.1381, -0.0677,  0.0214],
        [-0.0854, -0.1220,  0.0528,  ..., -0.0326,  0.1137, -0.1492],
        ...,
        [-0.1451,  0.2142, -0.0415,  ...,  0.0139,  0.2073, -0.0185],
        [-0.0124, -0.0187, -0.0367,  ..., -0.0284, -0.0344,  0.0746],
        [-0.0085,  0.0275, -0.0184,  ..., -0.0533,  0.0395,  0.1969]])), ('mlp_extractor.policy_net.8.bias', tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])), ('mlp_extractor.value_net.0.weight', tensor([[-0.0353,  0.0726, -0.0385,  ..., -0.0219, -0.0077,  0.0584],
        [ 0.0619, -0.0375,  0.0065,  ...,  0.0197, -0.0133,  0.0383],
        [ 0.0562, -0.0380,  0.0533,  ...,  0.0488,  0.0006,  0.0117],
        ...,
        [ 0.0600,  0.0124, -0.0186,  ...,  0.0153, -0.0078,  0.0528],
        [-0.0148,  0.0209,  0.0260,  ..., -0.0305, -0.0076, -0.0399],
        [ 0.0048,  0.0162, -0.0053,  ..., -0.0208,  0.0554,  0.0598]])), ('mlp_extractor.value_net.0.bias', tensor([0., 0., 0.,  ..., 0., 0., 0.])), ('mlp_extractor.value_net.2.weight', tensor([[-0.0091, -0.0788, -0.0280,  ...,  0.0344, -0.0075,  0.0196],
        [-0.0112, -0.0479, -0.0045,  ..., -0.0120,  0.0107,  0.0023],
        [-0.0023, -0.0028, -0.0163,  ...,  0.0211,  0.0010, -0.0048],
        ...,
        [ 0.0021,  0.0170,  0.0822,  ...,  0.0410,  0.0185, -0.0122],
        [-0.0339,  0.0498,  0.0402,  ...,  0.0284, -0.0247, -0.0839],
        [ 0.0185,  0.0405,  0.0309,  ..., -0.0063, -0.0309,  0.0057]])), ('mlp_extractor.value_net.2.bias', tensor([0., 0., 0.,  ..., 0., 0., 0.])), ('mlp_extractor.value_net.4.weight', tensor([[ 0.0276,  0.0090, -0.0628,  ...,  0.0265, -0.0246, -0.0185],
        [ 0.0200, -0.0207,  0.0453,  ..., -0.0216,  0.0307, -0.0557],
        [ 0.0135, -0.0149,  0.0023,  ...,  0.0171, -0.0499,  0.0119],
        ...,
        [-0.0147, -0.0187,  0.0081,  ..., -0.0318, -0.0352, -0.0005],
        [-0.0023,  0.0478, -0.0188,  ..., -0.0131,  0.0447,  0.0089],
        [ 0.0308, -0.0533,  0.0121,  ..., -0.0215, -0.0382, -0.0419]])), ('mlp_extractor.value_net.4.bias', tensor([0., 0., 0.,  ..., 0., 0., 0.])), ('mlp_extractor.value_net.6.weight', tensor([[ 0.0496,  0.0588,  0.0135,  ...,  0.0246,  0.1150,  0.0511],
        [ 0.0545, -0.0342, -0.0280,  ...,  0.0553, -0.0450, -0.0207],
        [-0.0044,  0.0693,  0.0183,  ..., -0.0216, -0.0305,  0.0948],
        ...,
        [-0.0486,  0.0122, -0.0298,  ...,  0.1087, -0.0223, -0.0033],
        [ 0.0143,  0.0597,  0.0038,  ...,  0.0160, -0.0132,  0.0166],
        [-0.0898,  0.0603,  0.0068,  ..., -0.0464, -0.0515,  0.0240]])), ('mlp_extractor.value_net.6.bias', tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])), ('mlp_extractor.value_net.8.weight', tensor([[-0.1348,  0.1444,  0.0186,  ...,  0.0013,  0.1044, -0.0614],
        [-0.2132,  0.0374,  0.1122,  ...,  0.0651, -0.1116, -0.0437],
        [ 0.0014,  0.0519, -0.0273,  ..., -0.1011,  0.0625, -0.1252],
        ...,
        [ 0.0148,  0.0246, -0.1045,  ...,  0.0137,  0.0815,  0.2047],
        [ 0.0833,  0.1983, -0.0079,  ...,  0.0857, -0.0738,  0.1085],
        [ 0.0694,  0.0946,  0.0438,  ..., -0.1916,  0.0786, -0.0285]])), ('mlp_extractor.value_net.8.bias', tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])), ('action_net.weight', tensor([[-3.9800e-04,  1.9163e-03, -2.6321e-04,  ...,  1.3684e-03,
         -1.5650e-03,  1.5541e-03],
        [-1.8437e-04,  5.8801e-04,  1.0844e-04,  ...,  1.6307e-03,
         -1.6021e-03, -1.1008e-04],
        [-1.6508e-03,  6.1212e-04,  1.6425e-03,  ..., -8.3395e-04,
          3.0911e-04,  7.0763e-04],
        ...,
        [ 8.0308e-05, -7.1959e-04, -1.7396e-03,  ..., -2.1108e-03,
          2.5224e-03, -1.3341e-03],
        [ 7.4100e-04, -1.0316e-03,  1.4483e-03,  ..., -5.9415e-04,
         -5.6358e-04,  6.1777e-04],
        [-2.8354e-03,  3.8545e-04,  8.8040e-04,  ...,  1.1197e-03,
         -4.9646e-04, -7.3927e-04]])), ('action_net.bias', tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])), ('value_net.weight', tensor([[ 0.1712,  0.2683, -0.0271,  0.1764, -0.0361,  0.0964,  0.1507,  0.0291,
         -0.0089, -0.1019,  0.0434,  0.1345,  0.0086,  0.1983,  0.0792,  0.2389,
         -0.2412,  0.0292, -0.0737,  0.0941,  0.1847,  0.1375,  0.0592, -0.0616,
          0.1004, -0.0575, -0.0643,  0.0086, -0.0104,  0.2516,  0.1209,  0.0361,
          0.1408, -0.0273,  0.1557,  0.0355,  0.1484, -0.1529,  0.1758, -0.1076,
         -0.0866, -0.1103, -0.0583,  0.0617, -0.1786, -0.0812,  0.0617,  0.0423,
         -0.0155,  0.1319, -0.2087,  0.1528,  0.2247,  0.1144, -0.0285, -0.1380,
          0.0466,  0.2345,  0.1056, -0.0733, -0.0563, -0.0386,  0.0018,  0.1331]])), ('value_net.bias', tensor([0.]))]), 'policy.optimizer': {'state': {}, 'param_groups': [{'lr': 0.0003, 'betas': (0.9, 0.999), 'eps': 1e-05, 'weight_decay': 0, 'amsgrad': False, 'maximize': False, 'foreach': None, 'capturable': False, 'differentiable': False, 'fused': False, 'params': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]}]}} 

INFO - root :
Before training :
 mean, std = 0.9306543469429016, 0.0024570401292294264 

INFO - root :
After training :
 mean, std = 0.9317989349365234, 0.0026939313393086195 

